{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Floyd",
	"scopeName": "source.floyd",
	"patterns": [
		{
			"include": "#statement"
		},
		{
			"include": "#expression"
		}
	],
	"repository": {
		"statement": {
			"patterns": [
				{
					"include": "#preprocessor-directive"
				},
				{
					"include": "#class-declaration"
				}
			]
		},
		"expression": {
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#literal"
				},
				{
					"include": "#operator"
				},
				{
					"include": "#item-access"
				},
				{
					"include": "#function-call"
				},
				{
					"include": "#builtin-function"
				},
				{
					"include": "#builtin-type"
				},
				{
					"include": "#semicolon"
				}
			]
		},
		"preprocessor-directive": {
			"patterns": [
				{
					"name": "meta.preprocessor.floyd",
					"begin": "(#)",
					"end": "$",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.preprocessor.floyd"
						}
					},
					"patterns": [
						{
							"include": "#comment"
						},
						{
							"include": "#preprocessor-directive-include"
						},
						{
							"include": "#preprocessor-directive-define"
						},
						{
							"include": "#preprocessor-directive-conditional"
						}
					]
				}
			]
		},
		"preprocessor-directive-include": {
			"patterns": [

			]
		},
		"preprocessor-directive-define": {
			"patterns": [

			]
		},
		"preprocessor-directive-conditional": {
			"patterns": [
				{
					"include": "#preprocessor-directive-ifndef"
				},
				{
					"include": "#preprocessor-directive-endif"
				}
			]
		},
		"preprocessor-directive-ifndef": {
			"patterns": [
				
			]
		},
		"preprocessor-directive-endif": {
			"patterns": [
				
			]
		},
		"class-declaration": {
			"patterns": [
				{
					"name": "meta.class.floyd",
					"begin": "\\b(class)\\b",
					"end": "({)",
					"beginCaptures": {
						"1": {
							"name": "storage.type.class.floyd"
						}
					},
					"endCaptures": {
						"1": {
							"name": "punctuation.section.class.begin.python"
						}
					},
					"patterns": [
						{
							"include": "#class-modifier"
						},
						{
							"include": "#class-name"
						},
						{
							"include": "#class-inheritance"
						}
					]
				}
			]
		},
		"class-modifier": {
			"patterns": [
				{
					"name": "keyword.other.floyd",
					"match": "\\b(abstract)\\b"
				}
			]
		},
		"class-name": {
			"patterns": [
				{
					"name": "entity.name.type.class.floyd",
					"match": "\\b([_a-zA-Z][_a-zA-Z0-9]*)\\b"
				}
			]
		},
		"class-inheritance": {
			"patterns": [
				{
					"name": "meta.class.inheritance.floyd",
					"begin": "(?=(:))",
					"end": "(?={)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.inheritance.floyd"
						}
					},
					"patterns": [
						{
							"name": "entity.other.inherited-class.floyd",
							"match": "\\b([_a-zA-Z][_a-zA-Z0-9]*)\\b"
						}
					]
				}
			]
		},
		"comment": {
			"patterns": [
				{
					"include": "#comment-line"
				},
				{
					"include": "#comment-block"
				}
			]
		},
		"comment-line": {
			"patterns": [
				{
					"name": "comment.line.double-slash.floyd",
					"begin": "(//)",
					"end": "\\n",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.comment.floyd"
						}
					},
					"patterns": [
						{
							"include": "#comment-line-continuation"
						},
						{
							"include": "#comment-tag"
						}
					]
				}
			]
		},
		"comment-block": {
			"patterns": [
				{
					"name": "comment.block.floyd",
					"begin": "(/\\*)",
					"end": "(\\*/)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.comment.begin.floyd"
						}
					},
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.comment.end.floyd"
						}
					},
					"patterns": [
						{
							"include": "#comment-line-continuation"
						},
						{
							"include": "#comment-tag"
						}
					]
				}
			]
		},
		"comment-line-continuation": {
			"patterns": [
				{
					"name": "constant.character.floyd",
					"match": "\n"
				}
			]
		},
		"comment-tag": {
			"patterns": [
				{
					"name": "keyword.other.floyd",
					"match": "\\b(FIXME|TODO):"
				}
			]
		},
		"literal": {
			"patterns": [
				{
					"include": "#literal-constant"
				},
				{
					"include": "#literal-string"
				},
				{
					"include": "#literal-number"
				}
			]
		},
		"literal-constant": {
			"patterns": [
				{
					"name": "constant.language.floyd",
					"match": "\\bNULL\\b"
				}
			]
		},
		"literal-string": {
			"patterns": [
				{
					"name": "string.quoted.double.floyd",
					"begin": "(\")",
					"end": "(\")",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.string.begin.floyd"
						}
					},
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.string.end.floyd"
						}
					},
					"patterns": [
						{
							"include": "#string-line-continuation"
						}
					]
				}
			]
		},
		"string-line-continuation": {
			"patterns": [
				{
					"name": "constant.character.floyd",
					"match": "\n"
				}
			]
		},
		"literal-number": {
			"patterns": [
				{
					"name": "constant.numeric.floyd",
					"match": "\\b(([1-9][0-9]*)|0)\\b"
				}
			]
		},
		"operator": {
			"patterns": [
				{
					"include": "#operator-logical"
				},
				{
					"include": "#operator-bitwise"
				},
				{
					"include": "#operator-arithmetic"
				},
				{
					"include": "#operator-comparison"
				},
				{
					"include": "#operator-assignment"
				},
				{
					"include": "#operator-ternary"
				}
			]
		},
		"operator-logical": {
			"patterns": [
				{
					"name": "keyword.operator.logical.floyd",
					"match": "(&&|!|\\|\\|)"
				}
			]
		},
		"operator-bitwise": {
			"patterns": [
				{
					"name": "keyword.operator.bitwise.floyd",
					"match": "(<<|>>|&|\\||~|\\^)"
				}
			]
		},
		"operator-arithmetic": {
			"patterns": [
				{
					"name": "keyword.operator.arithmetic.floyd",
					"match": "(\\+|-|/|\\*|\\+\\+|--|%)"
				}
			]
		},
		"operator-comparison": {
			"patterns": [
				{
					"name": "keyword.operator.comparison.floyd",
					"match": "(!=|==|>=|<=|<|>)"
				}
			]
		},
		"operator-assignment": {
			"patterns": [
				{
					"name": "keyword.operator.assignment.floyd",
					"match": "(=|\\+=|-=|/=|\\*=|%=)"
				}
			]
		},
		"operator-ternary": {
			"patterns": [
				{
					"comment": "a ? b : c"
				}
			]
		},
		"item-access": {
			"patterns": [
				{
					"name": "meta.item-access.floyd",
					"begin": "\\b(?=[a-zA-Z_][a-zA-Z0-9_]+\\s*\\[)",
					"end": "(\\])",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.arguments.end.floyd"
						}
					},
					"patterns": [
						{
							"include": "#item-name"
						},
						{
							"include": "#item-index"
						}
					]
				}
			]
		},
		"item-name": {
			"patterns": [
				{
					"include": "#builtin-function"
				}
			]
		},
		"builtin-function": {
			"patterns": [
				{
					"name": "support.function.builtin.floyd",
					"match": "\\b(addScores|box|firstWord|getKey|getLong|getShort|getWord|isfirst|issecond|location|menu|moveto|name|objectsInside|pluralInside|quit|random|return|room|scores|serial|setColor|setLong|setNoun|setPlayer|setShort|setTime|sizeof|split|startDaemon|stopTimer|strlen|strstr|strrstr|substr|time|toggle|verb|with)\\b"
				}
			]
		},
		"item-index": {
			"patterns": [
				{
					"begin": "(\\[)",
					"end": "(?=\\])",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.arguments.begin.floyd"
						}
					},
					"contentName": "meta.item-access.arguments.floyd",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				}
			]
		},
		"function-call": {
			"patterns": [
				{
					"name": "meta.function-call.floyd",
					"begin": "\\b(?=[a-zA-Z_][a-zA-Z0-9_]+\\s*\\()",
					"end": "(\\))",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.arguments.end.floyd"
						}
					},
					"patterns": [
						{
							"include": "#function-name"
						},
						{
							"include": "#function-argument"
						}
					]
				}
			]
		},
		"function-name": {
			"patterns": [
				{
					"include": "#builtin-function"
				},
				{
					"match": "\\b[a-zA-Z_][a-zA-Z0-9_]+\\b"
				}
			]
		},
		"function-argument": {
			"patterns": [
				{
					"begin": "(\\()",
					"end": "(?=\\))",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.arguments.begin.floyd"
						}
					},
					"contentName": "meta.function-call.arguments.floyd",
					"patterns": [
						{
							"name": "punctuation.seperator.arguments.floyd",
							"match": ","
						},
						{
							"name": "variable.parameter.function-call.floyd",
							"match": "\\b[a-zA-Z_][a-zA-Z0-9_]+\\b"
						},
						{
							"include": "#expression"
						}
					]
				}
			]
		},
		"builtin-type": {
			"patterns": [
				{
					"name": "support.type.floyd",
					"match": "\\b(string|int|object|super)\\b"
				}
			]
		},
		"semicolon": {
			"patterns": [
				{
					"name": "punctuation.terminator.statement.floyd",
					"match": ";"
				}
			]
		}
	}
}
